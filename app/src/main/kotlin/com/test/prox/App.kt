/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.test.prox

import com.test.prox.database.connectDatabase
import com.test.prox.features.CustomLocations
import com.test.prox.features.coersdk.CoreSdk
import com.test.prox.features.getRequiredRole
import com.test.prox.routes.configureRouting
import io.ktor.application.*
import io.ktor.features.*
import io.ktor.request.*
import io.ktor.routing.Routing.Feature.RoutingCallStarted
import io.ktor.serialization.*
import io.ktor.utils.io.*
import io.ktor.utils.io.core.*
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import org.slf4j.event.Level


fun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)




@Suppress("unused")
@kotlin.jvm.JvmOverloads
fun Application.main(testing: Boolean = false) {
    connectDatabase()
    install(CallLogging) {
        level = Level.INFO
        filter { call -> call.request.path().startsWith("/") }
    }
    install(ContentNegotiation) {
        json()
    }
    install(CustomLocations)
    install(CoreSdk)

    configureRouting()

//    receivePipeline.intercept()

    environment.monitor.subscribe(RoutingCallStarted) { call ->
        val role = call.route.getRequiredRole()
        GlobalScope.launch {
            val tmp = call.request.receiveChannel().readRemaining().readText(Charsets.UTF_8)
            println("receive parameters ====== $tmp ")
        }
        println("receive required role ====== $role ")
    }
}

