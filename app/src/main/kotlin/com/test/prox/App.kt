/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.test.prox

import com.test.prox.database.connectDatabase
import com.test.prox.features.CustomLocations
import com.test.prox.features.coersdk.CoreSdk
import com.test.prox.features.coersdk.CoreSdkPrincipal
import com.test.prox.features.getRequiredRole
import com.test.prox.routes.configureRouting
import com.test.prox.utils.formUrlEncoded
import io.ktor.application.*
import io.ktor.auth.*
import io.ktor.features.*
import io.ktor.http.*
import io.ktor.request.*
import io.ktor.response.*
import io.ktor.routing.*
import io.ktor.routing.Routing.Feature.RoutingCallStarted
import io.ktor.serialization.*
import org.slf4j.event.Level


fun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)


@Suppress("unused")
@kotlin.jvm.JvmOverloads
fun Application.main(testing: Boolean = false) {
    connectDatabase()
    install(DoubleReceive)
    install(StatusPages) {
        exception<Throwable> { cause ->
            println("exception cause ${cause.message}")
            call.respond(HttpStatusCode.InternalServerError,  mapOf("code" to "500", "msg" to cause.message))
        }
    }
    install(CallLogging) {
        level = Level.INFO
        filter { call -> call.request.path().startsWith("/") }
    }
    install(ContentNegotiation) {
        json()
        formUrlEncoded()
    }
    install(CustomLocations)
    install(CoreSdk)

    configureRouting()


}

@Suppress("unused")
@kotlin.jvm.JvmOverloads
fun Application.module() {
    environment.monitor.subscribe(RoutingCallStarted) { it ->
        val tmp = it.principal<CoreSdkPrincipal>()
        println("CoreSdkPrincipal ===== $tmp")
        routing {
            trace {
                log.trace(it.buildText())
            }
        }
    }
}